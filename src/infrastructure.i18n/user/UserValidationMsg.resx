<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="changes_saved" xml:space="preserve">
    <value>Your changes have been saved successfully</value>
  </data>
  <data name="email_already_used" xml:space="preserve">
    <value>Another user already registered this email address.</value>
  </data>
  <data name="email_change_fail" xml:space="preserve">
    <value>Sorry, the link has expired.</value>
  </data>
  <data name="email_change_fail_desc" xml:space="preserve">
    <value>Go to your account and request it again</value>
  </data>
  <data name="email_change_ok_desc" xml:space="preserve">
    <value>Your new email has been activated</value>
  </data>
  <data name="email_does_not_exists" xml:space="preserve">
    <value>No account exists with this email address</value>
  </data>
  <data name="email_password_incorrect" xml:space="preserve">
    <value>Invalid Email or Password.</value>
  </data>
  <data name="email_request_cancelled" xml:space="preserve">
    <value>Your email change request has been canceled successfully.</value>
  </data>
  <data name="password_changed" xml:space="preserve">
    <value>The password has been changed  successfully.</value>
  </data>
  <data name="password_change_expired" xml:space="preserve">
    <value>Reset password token has expired. Please request new one.</value>
  </data>
  <data name="password_incorrect" xml:space="preserve">
    <value>Password is incorrect.</value>
  </data>
  <data name="password_no_match" xml:space="preserve">
    <value>Your current password doesn't match.</value>
  </data>
  <data name="unexpected_error" xml:space="preserve">
    <value>Unexpected error. We have sent an email to our coding monkeys to fix it...</value>
  </data>
  <data name="username_not_available" xml:space="preserve">
    <value>Username is not available.</value>
  </data>
  <data name="username_saved" xml:space="preserve">
    <value>Username saved successfully.</value>
  </data>
  <data name="email_duplicated" xml:space="preserve">
    <value>Someone has already used this email to register with us.</value>
  </data>
  <data name="email_empty" xml:space="preserve">
    <value>Email is empty</value>
  </data>
  <data name="email_invalid" xml:space="preserve">
    <value>Email format is incorrect</value>
  </data>
  <data name="email_not_in_range" xml:space="preserve">
    <value>Email must be netween 6 y 250 characters.</value>
  </data>
  <data name="password_doesnt_match" xml:space="preserve">
    <value>Passwords don't match.</value>
  </data>
  <data name="password_empty" xml:space="preserve">
    <value>Password is empty.</value>
  </data>
  <data name="password_not_in_range" xml:space="preserve">
    <value>Password should be bewteen 6 and 30 characters.</value>
  </data>
  <data name="password_weak" xml:space="preserve">
    <value>Password is too weak.</value>
  </data>
  <data name="vpassword_empty" xml:space="preserve">
    <value>Repeated password is empty.</value>
  </data>
  <data name="username_empty" xml:space="preserve">
    <value>Username is empty.</value>
  </data>
  <data name="aboutme_not_in_range" xml:space="preserve">
    <value>About me should not be greater than 300 characters.</value>
  </data>
  <data name="country_not_in_range" xml:space="preserve">
    <value>Country should be between 2 y 50 characters</value>
  </data>
  <data name="current_password_empty" xml:space="preserve">
    <value>Current password is empty.</value>
  </data>
  <data name="current_password_not_in_range" xml:space="preserve">
    <value>Current password should be between 6 y 30 characters.</value>
  </data>
  <data name="email_not_valid" xml:space="preserve">
    <value>Email is not valid.</value>
  </data>
  <data name="new_password_empty" xml:space="preserve">
    <value>New passowrd is empty.</value>
  </data>
  <data name="new_password_not_in_range" xml:space="preserve">
    <value>New password should be between 6 and 30 characters.</value>
  </data>
  <data name="new_password_too_weak" xml:space="preserve">
    <value>New password too weak.</value>
  </data>
  <data name="password_renter" xml:space="preserve">
    <value>Repeat the password to save changes.</value>
  </data>
  <data name="repeat_new_password_doesnt_match" xml:space="preserve">
    <value>Repeated password doesn't match.</value>
  </data>
  <data name="repeat_new_password_empty" xml:space="preserve">
    <value>Repeated password is empty.</value>
  </data>
  <data name="repeat_new_password_not_in_range" xml:space="preserve">
    <value>Repeated password should be bewteen 6 and 30 characters.</value>
  </data>
  <data name="username_not_in_range" xml:space="preserve">
    <value>Username is too short.</value>
  </data>
  <data name="firstname_not_in_range" xml:space="preserve">
    <value>First name should be between 2 y 80 characters.</value>
  </data>
  <data name="email_requested_same_as_current" xml:space="preserve">
    <value>New email is the same as the current one.</value>
  </data>
  <data name="lastname_not_in_range" xml:space="preserve">
    <value>Last name should be between 2 y 80 characters.</value>
  </data>
  <data name="roles_not_in_range" xml:space="preserve">
    <value>Roles is too long. Value should be between 3 and 100 characters</value>
  </data>
  <data name="user_created" xml:space="preserve">
    <value>User has been created.</value>
  </data>
  <data name="user_saved" xml:space="preserve">
    <value>User has been saved successfully.</value>
  </data>
  <data name="email_duplicated_switch_to" xml:space="preserve">
    <value>This email is taken by another user. Switching back to:</value>
  </data>
  <data name="username_has_spaces" xml:space="preserve">
    <value>Username contains spaces.</value>
  </data>
  <data name="invalid_key" xml:space="preserve">
    <value>Invalid key.</value>
  </data>
  <data name="crop_area_invalid" xml:space="preserve">
    <value>Invalid crop area.</value>
  </data>
  <data name="user_id_invalid" xml:space="preserve">
    <value>Invalid user.</value>
  </data>
  <data name="avatar_too_big" xml:space="preserve">
    <value>Upload image is greater than 10 MB, please upload smaller size. </value>
  </data>
  <data name="error_wierd_shit_going_on" xml:space="preserve">
    <value>We felt a great disturbance in the force, as if millions of lines of code suddenly cried out in terror and were suddenly silenced. We fear something terrible has happened. We are looking into it.</value>
  </data>
  <data name="username_empty_or_spaces" xml:space="preserve">
    <value>Username can't be empty or contain spaces.</value>
  </data>
  <data name="password_nospaces" xml:space="preserve">
    <value>Your password can't contain spaces.</value>
  </data>
  <data name="email_not_modified" xml:space="preserve">
    <value>Email unchanged.</value>
  </data>
  <data name="email_change_ok" xml:space="preserve">
    <value>Your email has been changed successfully</value>
  </data>
  <data name="password_change_ok" xml:space="preserve">
    <value>Your password has been changed correctly.</value>
  </data>
  <data name="username_not_modified" xml:space="preserve">
    <value>Username unchanged.</value>
  </data>
  <data name="username_change_ok" xml:space="preserve">
    <value>Your username has been changed successfully.</value>
  </data>
</root>